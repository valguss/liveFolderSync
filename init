#! /bin/sh
### BEGIN INIT INFO
# Provides:          liveFolderSync
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Realtime Folder Syncronisation across servers
# Description:       Uses rsync and ssh to keep in sync a master and
#                    slave server, for example a web server.
### END INIT INFO

# Author: Tom Scott-Malden <tom@skywire.co.uk>
# Reference: http://www.thegeekstuff.com/2012/03/lsbinit-script/

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Realtime Folder Syncronisation across servers"
NAME=liveFolderSync
DAEMON=/usr/sbin/$NAME
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

#!/bin/bash
#
# chkconfig: 35 90 12
# description: Foo server
#
# Get function from functions library
. /lib/lsb/init-functions
# Start the service FOO

#make sure files are there
test -x $DAEMON || exit 5

### main logic ###
case "$1" in
  start)
	#check if PID file exists before starting process
	if [ -e $PIDFILE ]; then
        log_daemon_msg "$NAME already exisits"
		exit
	fi
	log_daemon_msg "Starting the process" "$NAME"
	#start the daemon wit hthe help of start-stop-daemon
	#log the message appropriately
    if start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON ; then
        log_end_msg 0
    else
        log_end_msg 1
    fi
    ;;
    stop)
    # Stop the daemon.
    if [ -e $PIDFILE ]; then
        tart-stop-daemon --stop --quiet --oknodo --pidfile $PIDFILE
        /bin/rm -rf $PIDFILE
    else
        log_daemon_msg "$NAME process is not running"
        log_end_msg 0
    fi
    ;;
    restart)
        # Restart the daemon.
        $0 stop && sleep 2 && $0 start
        ;;
    #status)
        # Check the status of the process.
    #    if [ -e $PIDFILE ]; then
    #        status_of_proc -p $PIDFILE $DAEMON "$NAME process" && exit 0 || exit $?
    #    else
    #        log_daemon_msg "$NAME Process is not running"
    #        log_end_msg 0
    #    fi
    #;;
    reload)
        # Reload the process. Basically sending some signal to a daemon to reload
        # it configurations.
        if [ -e $PIDFILE ]; then
            start-stop-daemon --stop --signal USR1 --quiet --pidfile $PIDFILE --name $NAME
            log_success_msg "$NAME process reloaded successfully"
        else
            log_failure_msg "$PIDFILE does not exists"
        fi
    ;;
    *)
        # For invalid arguments, print the usage message.
        echo "Usage: $0 {start|stop|restart|reload}"
        exit 2
    ;;
    esac